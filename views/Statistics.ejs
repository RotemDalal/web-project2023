<!DOCTYPE html>
<html>
<head>
  <title>Statistics</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>

  <h1>Statistics</h1>

  <div id="chart" style="display: block;"> <!-- Changed to block to display it -->
    <h2>ðŸ“ˆ The highest price charts</h2>
    <svg id="barGraph"></svg>
  </div>

  <div id="pieChart"> 
    <h2>ðŸ¥§ Kosher Distribution</h2>
    <svg id="kosherPieChart"></svg>
  </div>

  <script>
   function renderPieChart(data) {
    const width = 500;
    const height = 500;
    const radius = Math.min(width, height) / 2;

    // Calculate the total count of all segments
    const total = data.reduce((sum, d) => sum + d.count, 0);

    const svg = d3.select("#kosherPieChart")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", `translate(${width / 2}, ${height / 2})`);

    const color = d3.scaleOrdinal(["#4daf4a", "#377eb8", "#ff7f00", "#984ea3", "#e41a1c"]);

    const pie = d3.pie().value(d => d.count);

    const path = d3.arc()
        .outerRadius(radius - 10)
        .innerRadius(0);

    const label = d3.arc()
        .outerRadius(radius)
        .innerRadius(radius - 80);

    const arc = svg.selectAll(".arc")
        .data(pie(data))
        .enter().append("g")
        .attr("class", "arc");

    arc.append("path")
        .attr("d", path)
        .attr("fill", d => color(d.data._id));

    arc.append("text")
        .attr("transform", d => `translate(${label.centroid(d)})`)
        .attr("dy", "0.35em")
        .text(d => {
            // Calculate the percentage for this slice
            const percent = (d.data.count / total * 100).toFixed(2) + "%";
            return d.data._id ? `Yes: ${percent}` : `No: ${percent}`;
        });
}



    const margin = {top: 20, right: 20, bottom: 30, left: 40},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

    const svg = d3.select("#barGraph")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", `translate(${margin.left}, ${margin.top})`);

    const x = d3.scaleBand().range([0, width]).padding(0.1),
          y = d3.scaleLinear().range([height, 0]);

    // Function to show tab
    function showTab(tabName) {
    const tabs = ['chart', 'data', 'products'];  // All tab ids
    tabs.forEach(tab => document.getElementById(tab).style.display = 'none');
    document.getElementById(tabName).style.display = 'block';
}

    // Function to fetch and render stats
    async function fetchStats() {
    try {
        const response = await fetch('/Statistics');
        const data = await response.json();
        console.log('Fetched Data:', data);

        // Sort the typeStats by count in descending order
        const typeStats = data.typeStats
            .map(d => ({ type: d._id, count: d.count }))
            .sort((a, b) => b.count - a.count);

        // Sort products by price in descending order
        const sortedProducts = data.products.sort((a, b) => b.price - a.price);

        console.log('Transformed Type Stats:', typeStats);
        console.log('Sorted Products:', sortedProducts);

        updateChart(sortedProducts.map(product => ({ type: product.name, count: product.price })), 'Product Prices');

        const kosherStats = data.kosherStats;
        renderPieChart(kosherStats);
    } catch (error) {
        console.error('Error fetching or parsing data:', error);
    }
}

    // Function to update the chart
    function updateChart(stats, title) {
  x.domain(stats.map(d => d.type));
  y.domain([0, d3.max(stats, d => d.count)]);

  // Remove any previous bars and axes
  svg.selectAll(".bar").remove();
  svg.selectAll(".axis").remove();

  // Draw new bars
  svg.selectAll(".bar")
    .data(stats)
    .enter().append("rect")
    .attr("class", "bar")
    .attr("x", d => x(d.type))
    .attr("width", x.bandwidth())
    .attr("y", d => y(d.count))
    .attr("height", d => height - y(d.count))
    .attr("fill", "steelblue");  // Added color

  // Add x-axis
  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
    .selectAll("text")  
    .style("text-anchor", "end")
    .attr("dx", "-.8em")
    .attr("dy", ".15em")
    .attr("transform", "rotate(-65)");

  // Add y-axis
  svg.append("g")
    .attr("class", "axis")
    .call(d3.axisLeft(y));

  console.log(title, stats);
}

    // Fetch and render stats when the page loads
    document.addEventListener("DOMContentLoaded", fetchStats);
  </script>
</body>
</html>
